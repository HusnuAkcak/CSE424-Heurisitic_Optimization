import time

small_sample = [
    [5732]
    , [6799, 9747]
    , [9409, 9287, 7707]
    , [3392, 7035, 8486, 5140]
    , [2555, 271, 6904, 313, 3721]
]

large_sample = [
    [5732]
    , [6799, 9747]
    , [9409, 9287, 7707]
    , [3392, 7035, 8486, 5140]
    , [2555, 271, 6904, 313, 3721]
    , [798, 6295, 5642, 5784, 6370, 6448]
    , [621, 4001, 2737, 6019, 8632, 6828, 1235]
    , [6758, 3506, 4473, 9889, 9974, 1606, 4232, 5766]
    , [1315, 7185, 8991, 4584, 9860, 7024, 7523, 5501, 1693]
    , [3531, 9026, 5326, 5895, 3273, 5217, 2637, 1438, 5462, 6321]
    , [502, 15, 1561, 4878, 5606, 485, 7159, 2848, 7273, 3050, 4937]
    , [4865, 2999, 9334, 1722, 5322, 8737, 8261, 7412, 3474, 788, 3141, 6906]
    , [5132, 3296, 3222, 3954, 2330, 3065, 9327, 8296, 6877, 6164, 4732, 8095, 4354]
    , [7838, 8465, 4550, 7249, 8708, 4871, 4122, 4522, 1053, 8554, 5707, 7884, 7451, 442]
    , [2450, 9185, 1182, 8379, 1850, 7967, 6740, 525, 4107, 3744, 4179, 1725, 373, 9159, 4968]
    , [5789, 7315, 290, 4244, 7429, 696, 2622, 5894, 6849, 141, 4016, 5324, 998, 827, 9958, 1858]
    , [1768, 6530, 3363, 4694, 9400, 7563, 5895, 1377, 8612, 4068, 2911, 3460, 3417, 1670, 9967, 7418, 8374]
    , [128, 3781, 8542, 884, 5717, 4846, 8356, 1954, 114, 5389, 5624, 367, 780, 6904, 3683, 2807, 8664, 455]
    , [9828, 6798, 5904, 1241, 8476, 9997, 9856, 8274, 980, 8614, 9218, 1180, 65, 6472, 2886, 5700, 8950, 7883, 1587]
    , [7259, 8287, 7853, 2830, 6418, 6519, 479, 9327, 8507, 3667, 5089, 1718, 9619, 3388, 3669, 3019, 4677, 1950, 1239, 6353]
    , [4930, 8121, 4292, 3876, 9751, 7718, 754, 393, 5528, 7502, 7606, 4150, 807, 9630, 296, 5877, 3025, 3791, 9327, 779, 3519]
    , [4899, 3769, 9531, 1058, 9508, 1783, 2444, 6001, 7272, 5364, 1911, 4608, 3047, 2158, 5950, 5103, 7577, 6666, 5979, 7250, 9493, 7273]
    , [29, 9697, 1078, 9207, 5980, 5578, 8753, 845, 938, 8447, 1679, 3388, 2137, 8541, 2809, 4117, 8224, 710, 6986, 2051, 5640, 8851, 6388]
    , [8527, 1061, 4978, 5462, 5642, 6444, 3126, 3931, 7428, 6349, 5423, 5, 9573, 2386, 9713, 2151, 3922, 3091, 815, 9010, 2647, 6250, 392, 5700]
    , [5814, 3073, 5902, 750, 2902, 5544, 9228, 5235, 9916, 5698, 1849, 2969, 236, 8208, 6569, 8548, 6682, 4243, 4810, 9937, 3274, 611, 1970, 7748, 9865]
    , [53, 6995, 2466, 3805, 5209, 3734, 8895, 3421, 4828, 6422, 9497, 4355, 4163, 4134, 9017, 8142, 8012, 5428, 9156, 9712, 1868, 2538, 1264, 4747, 2522, 8703]
    , [792, 1581, 1677, 5026, 9493, 1625, 8448, 4189, 8563, 7769, 8636, 3279, 6201, 1467, 3430, 4458, 3872, 4061, 9519, 2221, 1105, 7585, 1589, 9828, 9053, 2078, 6648]
    , [9575, 7374, 7978, 6319, 8967, 5116, 8868, 61, 1123, 5001, 6760, 8567, 9220, 8064, 9020, 2789, 1989, 2188, 1126, 8675, 4053, 1261, 1429, 3383, 2820, 2538, 7629, 4894]
    , [5221, 1742, 9853, 8830, 2013, 7007, 8206, 4073, 2945, 53, 1992, 9227, 3224, 4572, 7419, 6594, 8612, 9891, 1185, 3388, 622, 6970, 410, 4877, 5272, 4926, 7615, 5279, 8903]
    , [6416, 1504, 8148, 6932, 4884, 8077, 5892, 5165, 5275, 1647, 9702, 582, 6775, 2706, 6405, 9484, 3990, 9675, 4024, 9227, 4129, 9819, 3161, 8258, 1253, 8209, 7972, 3157, 736, 8031]
    , [9073, 8462, 359, 5430, 5904, 8816, 9953, 8599, 8006, 7293, 8598, 371, 2128, 222, 8489, 6275, 2784, 826, 4620, 2708, 5275, 2860, 9971, 8212, 1342, 9058, 4059, 7271, 6634, 4015, 5955]
    , [7903, 5304, 6882, 112, 1510, 4200, 1001, 8907, 2516, 4898, 9324, 2980, 4149, 9558, 3252, 9260, 5672, 3850, 4274, 981, 8809, 5242, 4730, 6665, 843, 6129, 2027, 6292, 5413, 27, 242, 9772]
    , [7413, 4906, 6784, 9574, 5761, 2583, 9541, 1284, 5832, 769, 1961, 8610, 2974, 943, 6281, 4949, 8727, 5526, 5329, 8936, 3914, 8713, 8165, 8870, 3454, 2668, 5020, 1043, 9626, 6664, 3432, 7679, 3614]
    , [6469, 8617, 2639, 7444, 7163, 7736, 7138, 558, 5414, 9584, 3332, 6343, 9676, 8529, 3835, 7413, 1529, 1869, 3673, 8194, 7775, 2751, 6003, 9752, 6922, 6489, 513, 3531, 2486, 5782, 8509, 1866, 5929, 9612]
    , [4780, 5419, 4939, 7784, 1391, 3064, 6005, 5410, 3658, 6581, 2562, 8831, 5401, 2813, 2795, 6564, 2265, 1431, 6647, 1779, 5148, 9909, 390, 3534, 7050, 5753, 9193, 7097, 6917, 1064, 5990, 1280, 6375, 5241, 9397]
    , [218, 7704, 7345, 1268, 8387, 4197, 4315, 4118, 7770, 5023, 917, 9654, 4115, 2650, 7953, 5928, 8003, 456, 7970, 3291, 4031, 9644, 7472, 6321, 8125, 1475, 9076, 5904, 7620, 4509, 4639, 9871, 5542, 3678, 9280, 8438]
    , [5519, 3282, 5177, 1609, 3326, 1207, 5498, 3539, 3520, 2940, 1681, 6194, 1117, 8386, 2186, 4656, 8144, 3324, 9207, 1377, 7356, 5558, 8615, 9779, 8596, 3815, 2618, 5665, 5435, 2204, 3608, 9002, 3462, 464, 2859, 7473, 936]
    , [8999, 5897, 6972, 4903, 252, 3387, 7526, 8957, 8402, 4295, 3131, 1520, 1867, 5926, 8875, 1591, 1420, 3917, 1813, 1855, 4873, 4282, 5527, 1430, 8535, 6031, 5572, 6988, 9309, 7691, 9734, 914, 2165, 714, 644, 1365, 83, 8239]
    , [8597, 5595, 6740, 5905, 5481, 1635, 3180, 1969, 7063, 925, 5256, 1605, 7953, 5711, 8345, 9419, 3100, 9040, 8891, 1388, 1928, 7926, 3215, 6691, 2964, 3571, 6799, 883, 9077, 2503, 2301, 5527, 6119, 2753, 8121, 5309, 1720, 5603, 4230]
    , [9244, 2859, 2542, 7834, 5057, 7900, 3404, 9837, 1479, 7406, 4090, 6123, 831, 5235, 7846, 295, 6794, 3816, 2632, 4259, 2243, 1857, 6043, 2469, 4065, 4840, 8071, 2718, 5479, 9632, 4780, 9450, 1398, 2044, 4598, 5985, 1094, 7523, 4535, 971]
    , [2875, 38, 1310, 3191, 4011, 2332, 4378, 727, 4881, 7256, 2849, 4969, 1147, 9492, 5535, 8776, 2557, 3060, 4987, 5475, 8513, 6407, 5064, 2871, 6634, 8966, 4365, 3179, 2722, 8282, 4093, 3474, 765, 1892, 8738, 1834, 1846, 1426, 5400, 4478, 2700]
    , [1710, 8980, 3898, 7395, 7154, 3285, 8440, 9342, 1030, 6636, 5207, 3763, 7975, 5805, 9600, 5224, 8658, 7220, 5028, 7429, 7807, 2097, 6889, 4689, 5062, 3294, 8283, 5950, 8827, 8776, 2465, 7569, 1620, 4793, 3383, 6772, 9899, 233, 6053, 7735, 8480, 5168]
    , [3989, 5490, 178, 4851, 4500, 3595, 1273, 8727, 1701, 6555, 4589, 7240, 95, 6333, 694, 2763, 4842, 2255, 9015, 7143, 8060, 4867, 8286, 9103, 4821, 8291, 7896, 4070, 595, 1423, 3388, 927, 2240, 3485, 7367, 292, 5892, 7648, 9503, 6218, 4945, 3947, 472]
    , [6061, 6468, 712, 4122, 374, 9230, 7176, 3497, 2191, 4961, 8995, 544, 9472, 3913, 9072, 6864, 7312, 9556, 7122, 6627, 1660, 9431, 9658, 5375, 7376, 1839, 9498, 7161, 4725, 9674, 3108, 197, 6374, 4633, 2204, 4643, 9180, 6266, 3254, 8245, 7610, 8860, 166, 6180]
    , [4142, 973, 8521, 9941, 2304, 9500, 6672, 7361, 9387, 7113, 3135, 6780, 8751, 9602, 2484, 3478, 3298, 2349, 7315, 9526, 8621, 2258, 5326, 6004, 4513, 5621, 8371, 7591, 4399, 4072, 736, 3621, 3101, 5130, 6822, 82, 1909, 5802, 3729, 9642, 6028, 6952, 3572, 3045, 5403]
    , [525, 1451, 3024, 8855, 722, 6989, 1712, 5943, 115, 95, 7169, 4040, 2090, 3156, 6557, 61, 7161, 6723, 5806, 7033, 2488, 2904, 502, 6519, 2241, 1344, 9929, 3242, 3450, 3450, 3167, 9273, 9538, 5023, 7074, 6823, 8164, 2433, 1249, 1012, 2142, 6210, 3232, 7743, 3218, 9168]
    , [4835, 3604, 8651, 7342, 7087, 1936, 3398, 9192, 539, 1136, 8937, 6797, 9947, 302, 2480, 9674, 3832, 7713, 1988, 3666, 6214, 106, 6732, 9789, 9298, 1676, 2797, 7528, 2115, 2194, 2416, 4421, 4996, 288, 3992, 7662, 8460, 6172, 6652, 862, 7946, 3920, 5348, 153, 7826, 6753, 8600]
    , [213, 7171, 5681, 7692, 871, 7944, 5876, 1797, 9016, 7325, 3327, 8154, 9119, 6415, 3117, 4645, 315, 7998, 2452, 8123, 5414, 1406, 6418, 7302, 1273, 6583, 8606, 9557, 7407, 1101, 7364, 3750, 6550, 4430, 6939, 7480, 4128, 4961, 4134, 9616, 970, 3738, 3036, 6932, 2642, 1760, 7639, 994]
    , [2674, 4088, 814, 2867, 5600, 4147, 3738, 1945, 8968, 5314, 5372, 2172, 9400, 1600, 3341, 931, 5960, 8870, 7050, 4660, 6646, 2808, 167, 8821, 2961, 6691, 6012, 8728, 358, 5036, 4527, 316, 7126, 4115, 4453, 5952, 9851, 2557, 4288, 5912, 5668, 8127, 7275, 3740, 2320, 2831, 4793, 5983, 9546]
]


def sort_lists(sample_lists):

    sorted_lists = []
    for curr_index in range(len(sample_lists)):
        start_time = time.time()
        curr_sorted = []
        per(sample_lists[curr_index], [], curr_sorted)
        end_time = time.time()
        print('list[{}] is sorted in {} seconds: {}'.format(curr_index, round(end_time-start_time, 3), curr_sorted))
        sorted_lists.append(curr_sorted)

    return sorted_lists


def per(lst: list, curr: list, sol):

    if len(lst) == 0 and curr is not None:
        sol.append(curr.copy())

    for i in range(len(lst)):
        sub_list = lst.copy()
        sub_list.remove(lst[i])

        new_one = lst[i]
        if not all_smaller_than_or_equal(curr, lst[i]):
            return

        curr.append(lst[i])
        per(sub_list, curr, sol)

        curr.pop()

    return


def all_smaller_than_or_equal(lst, item):

    i = 0
    while i < len(lst) and lst[i] <= item:
        i += 1

    return i == len(lst)


sort_lists(large_sample)

